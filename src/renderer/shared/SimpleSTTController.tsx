import React, { useState, useRef, useCallback, useEffect } from 'react'
import { Play, Square } from 'lucide-react'
import { TranscriptSegment, RecordingState } from './audio/types'

interface SimpleSTTControllerProps {
  onTranscriptUpdate: (segments: TranscriptSegment[]) => void
  onRecordingStateChange?: (state: RecordingState) => void
}

export function SimpleSTTController({ onTranscriptUpdate, onRecordingStateChange }: SimpleSTTControllerProps) {
  const [isRecording, setIsRecording] = useState(false)
  const [isProcessing, setIsProcessing] = useState(false)
  
  const segmentsRef = useRef<TranscriptSegment[]>([])
  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  const startTimeRef = useRef<number>(0)
  const isActiveRef = useRef<boolean>(false)

  // Frases de exemplo para simular transcri√ß√£o
  const samplePhrases = [
    "Ol√°, como voc√™ est√° se sentindo hoje?",
    "Entendo, pode me contar mais sobre isso?",
    "Isso deve ter sido muito dif√≠cil para voc√™.",
    "Como voc√™ lidou com essa situa√ß√£o?",
    "Voc√™ gostaria de explorar esse sentimento?",
    "Isso √© muito importante, obrigado por compartilhar.",
    "Vamos trabalhar juntos nessa quest√£o.",
    "Como isso te fez sentir?",
    "Voc√™ tem alguma estrat√©gia para lidar com isso?",
    "√â normal se sentir assim nessa situa√ß√£o."
  ]

  const addSegment = useCallback((text: string, speaker: 'TERAPEUTA' | 'PACIENTE' | 'DESCONHECIDO' = 'TERAPEUTA') => {
    const now = Date.now()
    const newSegment: TranscriptSegment = {
      start: now,
      end: now + 2000, // 2 segundos de dura√ß√£o estimada
      speaker,
      text,
      status: 'final'
    }
    
    segmentsRef.current.push(newSegment)
    onTranscriptUpdate([...segmentsRef.current])
    
    console.log('üìù Novo segmento adicionado:', text)
  }, [onTranscriptUpdate])

  const simulateTranscription = useCallback(() => {
    // Verificar se ainda est√° ativo
    if (!isActiveRef.current) {
      console.log('‚èπÔ∏è Simula√ß√£o parada - n√£o est√° mais ativo')
      return
    }
    
    console.log('üéØ Simulando nova transcri√ß√£o...')
    
    // Alternar entre TERAPEUTA e PACIENTE
    const speakers: Array<'TERAPEUTA' | 'PACIENTE'> = ['TERAPEUTA', 'PACIENTE']
    const randomSpeaker = speakers[Math.floor(Math.random() * speakers.length)]
    
    // Selecionar frase aleat√≥ria
    const randomPhrase = samplePhrases[Math.floor(Math.random() * samplePhrases.length)]
    
    // Adicionar varia√ß√£o para PACIENTE
    const finalText = randomSpeaker === 'PACIENTE' 
      ? `Sim, ${randomPhrase.toLowerCase()}` 
      : randomPhrase
    
    addSegment(finalText, randomSpeaker)
    
    // Agendar pr√≥xima simula√ß√£o (3-8 segundos)
    const nextInterval = 3000 + Math.random() * 5000
    console.log('‚è∞ Pr√≥xima simula√ß√£o em:', nextInterval / 1000, 'segundos')
    intervalRef.current = setTimeout(simulateTranscription, nextInterval)
  }, [addSegment])

  const startRecording = useCallback(async () => {
    try {
      console.log('üî¥ Iniciando Simple STT...')
      setIsProcessing(true)
      
      // Limpar segmentos anteriores
      segmentsRef.current = []
      onTranscriptUpdate([])
      
      startTimeRef.current = Date.now()
      isActiveRef.current = true
      setIsRecording(true)
      setIsProcessing(false)
      
      // Notificar mudan√ßa de estado
      onRecordingStateChange?.({
        isRecording: true,
        isProcessing: false,
        systemAudioAvailable: false
      })
      
      console.log('üé§ Simple STT iniciado!')
      
      // Adicionar segmento inicial
      addSegment('[Grava√ß√£o iniciada - simula√ß√£o ativa]')
      
      // Iniciar simula√ß√£o ap√≥s 2 segundos
      setTimeout(() => {
        console.log('üöÄ Iniciando simula√ß√£o autom√°tica...')
        simulateTranscription()
      }, 2000)
      
    } catch (error) {
      console.error('‚ùå Erro ao iniciar Simple STT:', error)
      setIsProcessing(false)
      
      addSegment(`[Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}]`)
    }
  }, [addSegment, simulateTranscription, onRecordingStateChange, isRecording])

  const stopRecording = useCallback(async () => {
    try {
      console.log('‚èπÔ∏è Parando Simple STT...')
      setIsProcessing(true)
      
      // Parar simula√ß√£o
      isActiveRef.current = false
      
      // Limpar intervalos
      if (intervalRef.current) {
        clearTimeout(intervalRef.current)
        intervalRef.current = null
      }
      
      setIsRecording(false)
      setIsProcessing(false)
      
      // Notificar mudan√ßa de estado
      onRecordingStateChange?.({
        isRecording: false,
        isProcessing: false,
        systemAudioAvailable: false
      })
      
      const duration = Date.now() - startTimeRef.current
      const durationSeconds = Math.round(duration / 1000)
      
      console.log('‚úÖ Simple STT finalizado. Dura√ß√£o:', durationSeconds, 'segundos')
      
      // Adicionar segmento de finaliza√ß√£o
      addSegment(`[Grava√ß√£o finalizada - ${segmentsRef.current.length} segmentos em ${durationSeconds}s]`)
      
      // Simular salvamento
      setTimeout(async () => {
        try {
          const saveData = {
            timestamp: startTimeRef.current,
            transcript: segmentsRef.current
          }
          
          const result = await window.overlay?.saveRecording?.(saveData)
          
          if (result?.success) {
            addSegment(`[Arquivos salvos em: ${result.path}]`)
            console.log('üíæ Arquivos salvos:', result.files)
          } else {
            addSegment('[Erro ao salvar arquivos]')
          }
        } catch (error) {
          console.error('‚ùå Erro ao salvar:', error)
          addSegment('[Erro ao salvar arquivos]')
        }
      }, 1000)
      
    } catch (error) {
      console.error('‚ùå Erro ao parar Simple STT:', error)
      setIsProcessing(false)
    }
  }, [addSegment, onRecordingStateChange])

  // Limpeza ao desmontar
  useEffect(() => {
    return () => {
      console.log('üßπ Limpando SimpleSTTController...')
      isActiveRef.current = false
      if (intervalRef.current) {
        clearTimeout(intervalRef.current)
        intervalRef.current = null
      }
    }
  }, [])

  return (
    <button
      onClick={isRecording ? stopRecording : startRecording}
      disabled={isProcessing}
      className={`event-layer w-[32px] h-[32px] rounded-full border text-white/90 flex items-center justify-center hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-white/30 transition-all duration-200 ${
        isRecording 
          ? 'bg-red-500/90 border-red-400 animate-pulse shadow-lg shadow-red-500/50' 
          : 'bg-white/10 border-white/20 hover:bg-white/15 hover:border-white/30'
      } ${isProcessing ? 'opacity-50 cursor-not-allowed animate-spin' : ''}`}
      aria-label={isRecording ? 'Parar grava√ß√£o' : 'Iniciar grava√ß√£o'}
      title={
        isRecording 
          ? 'Simple STT ativo - clique para parar'
          : 'Iniciar Simple Speech-to-Text (simula√ß√£o)'
      }
    >
      {isRecording ? <Square size={16} /> : <Play size={16} />}
    </button>
  )
}
